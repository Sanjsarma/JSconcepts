Output:
console.log - to terminal
alert() - modal

Types: 
numberm string="" or ''. boolean
 Undefined :- variable that has not been assigned a value is of type undefined. A method or statement also returns undefined if the variable that is being evaluated does not have an assigned value. A function returns undefined if a value was not returned.
Undefined is a variable that refers to something that doesn't exist, and the variable isn't defined to be anything.
null is a variable that is defined but is missing a value
 let a;
console.log(a); // undefined

let b = null;
console.log(b); // null
Object : name/value pairs

const person = {};
person.firstName = "John";
person.lastName = "Doe";
person.age = 50;
person.eyeColor = "blue";

const person = {
  firstName: "John",
  lastName: "Doe",
  age: 50,
  eyeColor: "blue"
};

Array of objects:-
var points=[{x:0, y:1}, {x:1, y:1}];
console.log(points[0]);
console.log(points[0].y); //1
console.log(points[0].x); //0

Object of arrays:
var data={
    trial1: [[1,2], [3,4]],
    trial2: [[2,3],[4,5]]
}
console.log(data.trial1[0][0]) //1
console.log(data.trial1[0]) //[1,2]
console.log(data.trial1) //[ [ 1, 2 ], [ 3, 4 ] ]

Operators:
points[1].x - points[0].x //1-0=1
"3" + "2"  //32

"two" == "three" // => false: the two strings are different
"two" > "three" // => true: "tw" is alphabetically greater than "th"
var x=2, y=3;
false == (x > y)

Functions: 
function plus1(x){
return x+1;
}

var square=function(x){
  return x*x;
};
square(plus1(y)); //2 fns in one exp

Methods:-functions+objects
var a=[];
a.push(1,2,3);
a.reverse();

//objects
function Point(x,y){
this.x=x; this.y=y; 
}
var p = new Point(1,1);

letter, _ or $ : begin identifiers

Not every line break is treated as semi colon. Those code that can't be parsed without semicolons only.

eg: 
var a
a
=                         var a; a=3; console.log(a);
3
console.log(a)

This code looks like
two separate statements separated with a newline:
var y = x + f                       var y = x + f(a+b).toString();
(a+b).toString()

exceptions:-
return, break, continue : parsed with semicolon
return
true;                      return; true;

++, --
x
++
y                x; ++y;

primitive types: numbers, strings, booleans, null, undefined
object: collection of properties- arrays, functions

types = primitive, object.
mutable(value changes)- object, arrays, immutable(value does not change)-numbers, booleans, null, undefined

automatic type conversion.
untyped variables.
var declared outside a function: global vars, visible everywhere
inside a function: function scope, visible only to code appearing inside the function.

Numbers: 
JS doesn't distinguish between integer, floating point values. all nums : FP

NaN : not a number(0 by 0)
x == NaN no
x!=x yes, true iff x is NaN

Date(): for creating objects that represent date
var now=new Date() : current date and time
var then=new Date(2010,0,1) 
var elapsed = now-then;

+ : numbers - addition, strings - concatenation
var s= "hello";
s.charAt(0);
s.substring(1,4);
s.slice(1,4);
s.slice(-3);
s.lastIndexOf("l");
s.split(","); //to split one word with space into 2
s.replace("h","H");
s.toUpperCase()

Regex: 
/^HTML/ : match at start
/[1-9][0-9]*/ 
/\bjavascript\b/i : match js, case-insensitive

console.log("7"*"3") \\21

always use var to declare local variables. 





